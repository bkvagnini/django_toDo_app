#From "To Do App Django 3.0.mp4 video" ( https://www.youtube.com/watch?v=4RWFvXDUmjo )
https://docs.google.com/document/d/1eu_ImYL21W905howHsyW782BPxKVJp9vz5nlJYB2G2E/edit (these are the notes from this video)

Source Code: https://github.com/divanov11/to-do-app

00:00 - Introduction
1:40 - Create project
3:00 - Migrate database & create user
5:05 - Create app
5:50 - URL Routing
8:30 - Templates
9:45 - Create Model (Task)
13:25 - Render data (Tasks) in template
15:10 - Model Form
19:25 - Create Item
22:00 - Update Item
29:20 - Delete Item
34:45 - Cross out complete items
36:05 - Style template

>Create Virtual Environment
python3 -m venv <environment name> (e.g python3 -m venv .django)

>Activate virtual environment
source .<environment name>/bin/activate

>Install Django
pip install django=3.2.3
(or for a new dev machine - pip install -r requirements.txt)

>Create project
django-admin startproject <project name> (e.g. django-admin startproject todo)

>Run the server to verify it's working
python manage.py runserver
check localhost:8000 in browser

>Create Database (SQLite3 by default)
python manage.py migrate

>Create first user
python manage.py createsuperuser
For test purposes, AppAdmin : my new standard secure pw : brian@vagnini.net

>Create app 
python manage.py startapp tasks

>Update settings.py file (Installed Apps section)
   'tasks',

>Update views.py in tasks
from django.http import HttpResponse 

def index(request):
    return HttpResponse('sup bitches?')

>Create a urls.py file in tasks
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index)
]

Update urls.py in main project folder (todo)
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('tasks.urls'))

]

>Check the server again
check localhost:8000 in browser

>Create templates folder inside of app folder
create subfolder
create an html file (e.g. list.html)
(tasks > templates > tasks > list.html) 

>Add content to list.html
<h3>ToDo</h3>

>Update views.py - (9:35/41:13)
def index(request):
    #return HttpResponse('sup bitches?')
    return render(request, 'tasks/list.html')

>Create Database (models.py)
class Task(models.Model):
    title = models.CharField(max_length=200)
    complete = models.BooleanField(default=False)
    created = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

>Run Migrations to add new DB/DB fields into the app
python manage.py makemigrations
then 
python manage.py migrate (this creates a db.sqlite3 file - this is your actual database)

> Register the model in admin.py
from .models import *

admin.site.register(Task)

(Add a couple of tasks via the admin panel, so we have some sample data)

>Render the data out in te view (views.py)
from django.shortcuts import render
from django.http import HttpResponse 

from .models import *

def index(request):
    #return HttpResponse('sup bitches?')
    tasks = Task.objects.all()

    context = {'tasks': tasks}
    return render(request, 'tasks/list.html', context)

>Update the list.html file
<h3> ToDo</h3>

% for task in tasks %
    <div>
        <p>{{task}}</p>
    </div>
{% endfor %}    


>In the app (tasks) create a file (forms.py) (16:00/41:13)
from django import forms
from django.forms import ModelForm

from .models import *

class TaskForm(forms.ModelForm):
    class Meta:
        model = Task
        fields = '__all__'

>Edit views.py to include the form
from django.shortcuts import render
from django.http import HttpResponse 

from .models import *
from .forms import * # this is new

def index(request):
    #return HttpResponse('sup bitches?')
    tasks = Task.objects.all()

    form = TaskForm()#this is new

    context = {'tasks': tasks, 'form': form} #add the form section
    return render(request, 'tasks/list.html', context)

>Edit the List.html
<form method = "POST" action = "/">
    <!-- {{form}} --><!-- brings in all fields -->
    {{form.title}}<!-- brings in just the task field -->
    <input type = "submit" name = "Create Task" />
</form>

> Edit views.py
form = TaskForm()#this is new
    #for POST methods
    if request.method == "POST":
        form = TaskForm(request.POST)
        if form.is_valid():
            form.save()
        return redirect('/')

    context = {'tasks': tasks, 'form': form} #add the form section
    return render(request, 'tasks/list.html', context)

>Edit list.html to add a CSRF token (21:39/41:13) - adding a ToDo works correctly
<form method = "POST" action = "/">
    {% csrf_token %}
    <!-- {{form}} --><!-- brings in all fields -->
    {{form.title}}<!-- brings in just the task field --


>Adding Edit functionality to the task
1 - create a new html template under tasks (called update_task.html)
<h3>Update Task </h3>

<form>

    <input tyoe = "submit" name = "Update Task" />
</form>

2 - update views.py 
def updateTask(request, pk):
    task = Task.objects.get(id=pk)
    
    return render(request, 'tasks/update_task.html')

3 - update app/urls/py (tasks/urls.py)
urlpatterns = [
    path('', views.index, name = "list"),
    path('update_task/<str:pk>/', views.updateTask, name = "update_task") 
    #the str:pk makes the url dynamic and makes it use the pk provides by the updateTask function pk parameter
]

4 - update the list.html file
{% for task in tasks %}
    <div>
        <a href = "{% url 'update_task' task.id %}">Update</a> <!-- this is new -->
            
        <p>{{task}}</p>
    </div>
{% endfor %}

5 - Update views.py to add the form back in when updating
def updateTask(request, pk):
    task = Task.objects.get(id=pk)

    form = TaskForm (instance = task) #the instance = task refers to the task variable 2 lines above (this is how it gets the ID number)

    context = {'form':form}

    return render(request, 'tasks/update_task.html', context)

6 - Update the update_task.html file
<form method = "POST" action = "">
    {% csrf_token %}

    {{form}}
    <input type = "submit" name = "Update Task" />

</form>

7 - Update Views.py so that the update actually works (28:41/41:13)
def updateTask(request, pk):
    task = Task.objects.get(id=pk)

    form = TaskForm (instance = task) #the instance = task refers to the task variable 2 lines above (this is how it gets the ID number)
    #this section is new
    if request.method == 'POST':
        form = TaskForm (request.POST, instance = task)
        if form.is_valid():    
            form.save()
        return redirect('/')
    #end new section
    context = {'form':form}

    return render(request, 'tasks/update_task.html', context)

>Deleting a task
1 - create a delete.html file in templates/tasks
<p> Are you sure you want to delete "{{ item }}"? </p>

<a href ="{% url 'list' %}" > Cancel</a>

2 - update views.py and add a delete function
def deleteTask(request, pk):
    return render(request, 'tasks/delete.html')

3 - update app/urls/py (tasks/urls.py) 
urlpatterns = [
    path('', views.index, name = "list"),
    path('update_task/<str:pk>/', views.updateTask, name = "update_task"), 
    #the str:pk makes the url dynamic and makes it use the pk provides by the updateTask function pk parameter
    path('deleteTask/<str:pk>/', views.deleteTask, name = "delete") 
]

4 - Update views.py again
def deleteTask(request, pk):
    item = Task.objects.get(id=pk)

    context = {'item':item}
    return render(request, 'tasks/delete.html', context)

5 - Update list.html
{% for task in tasks %}
    <div>
        <p><a href = "{% url 'update_task' task.id %}">Update</a> 
        <a href = "{% url 'delete' task.id %}">Delete</a> <!-- this is new -->
        {{task}}</p>
    </div>
{% endfor %}

6 -  Update delete.html file
<form method = "POST" action = "">
{% csrf_token %}
<input type = "submit" name = "Confirm" />
</form>

7 - Update deleteTask function in views.py (34:30/41:13)
def deleteTask(request, pk):
    item = Task.objects.get(id=pk)
    #this section is new
    if request.method == 'POST':
        item.delete()
        return redirect('/')
    #end new section
    context = {'item':item}
    return render(request, 'tasks/delete.html', context)

8 - Update list.html to include crossing off items that are complete (but not deleting them) (35:55/41:13)
{% for task in tasks %}
    <div>
        <p><a href = "{% url 'update_task' task.id %}">Update</a> 
        <a href = "{% url 'delete' task.id %}">Delete</a> <!-- this is new -->

        <!-- crossing items off the list  - conditional logic goes here-->
        {% if task.complete == True  %}
        <strike>{{task}}</strike>
        {% else %} 
        {{task}}</p>
        {% endif %}
    </div>
{% endfor %}

>Styling the app (optional)

